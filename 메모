1. 컴포넌트


2. props


3.state
변수의 값이 바뀌면 화면의 값도 바뀐다.


4.Hook
값이 바뀌었나 안 바뀌었나 감시하는애
Hook을 통해서 넣어야 화면이 바뀐다.
Hook이라는것은 다양한 것들이 있다 이거만 10개 20개 있다.
그 중에 state라는 Hook이라는 것이있다.

Hook만 해도 엄청 많다.

 그중에서 state가 있다.
값을 변경하면 화면이 새로 그려준다.

event : 이벤트 핸들러 내에서 자동으로 제공되는 객체로, 발생한 이벤트에 대한 다양한 정보를 가지고 있습니다.

target : 이벤트가 발생한 요소를 가리킵니다. 예를 들어, 클릭 이벤트의 경우 클릭한 요소를, form의 submit 이벤트의 경우 제출된 form 요소를 가리킵니다.

value : form 요소(예: input, select, textarea)의 현재 값을 나타냅니다.

onCreate: 이 컴포넌트에서 사용하는 prop입니다. 일반적으로 이 prop은 함수를 가리키는 데 사용되며, 이 함수는 상위 컴포넌트(부모 컴포넌트)로부터 전달받습니다.

이름에서 볼 수 있듯이, onCreate는 "생성(create) 이벤트가 발생할 때 실행되는 함수"라는 의미를 가집니다. 
이 컴포넌트에서 사용자가 form을 제출하여 새로운 내용을 생성하려고 할 때 onCreate 함수가 호출되는 것입니다.

--
jsx:
1. Root 반드시 하나 일것
2. class에서 className으로
3. 자바스크립트 변수 {} 안에 출력
const name = "TOM"
const naver ={
 name: "네이버",
 url: "https://naver.com",
};

<div> {name} </div>
<h1
  style = {
      color: "#f0f",
      backgroundColor: "green",
}
>




자바스크립트 객체는 json으로 한다.
style json으로 설정
----------------------------------------------------------------------------------------------------------------------------------------------------------------

-onchage와 onchangemode의 차이
onChange와 onChangeMode는 이름에서 알 수 있듯이 이벤트 핸들러입니다. 둘의 차이는 다음과 같습니다:

onChange: onChange는 React에서 제공하는 내장 이벤트 핸들러입니다. 이 핸들러는 입력 요소(input, textarea, select 등)의 값이 변할 때 호출되는 함수를 정의합니다. 사용자가 입력 필드에 텍스트를 입력하거나, 체크박스를 선택하거나, 셀렉트 박스의 옵션을 바꾸는 등의 행위를 할 때 onChange 이벤트가 발생합니다.

jsx
Copy code
<input type="text" onChange={handleInputChange} />
위 코드에서 handleInputChange는 사용자가 텍스트 필드의 내용을 바꿀 때 호출될 함수입니다.

onChangeMode: 반면에 onChangeMode는 사용자가 직접 정의한 이벤트 핸들러 이름입니다. 이 이름은 콜백 함수를 통해 자식 컴포넌트에서 부모 컴포넌트로 특정 데이터를 전달하거나, 부모 컴포넌트에서 상태를 변경하도록 요청하는 등의 작업을 수행하는 데 사용할 수 있습니다. onChangeMode 함수의 정확한 기능은 해당 함수를 정의한 코드에 따라 다릅니다.

이 두 이벤트 핸들러는 용도가 다르므로 적절한 상황에서 사용해야 합니다. onChange는 입력 요소의 값 변경에 대응하며, onChangeMode는 특정 커스텀 로직을 수행하기 위해 사용자가 정의한 이벤트입니다.


----------------------------------------------------------------------------------------------------------------------------------------------------------------

- event.preventDefault():

event.preventDefault()는 JavaScript에서 이벤트의 기본 동작을 중단시키는 메소드입니다. 이 메소드는 이벤트 객체에 종속적입니다.

이벤트는 사용자 또는 브라우저 시스템에 의해 발생하는 특정 동작이나 상황을 나타냅니다. 예를 들어 클릭, 마우스 이동, 키보드 키 누름, 페이지 로드 완료 등이 있습니다. 
이런 이벤트들은 종종 기본 동작을 가지고 있는데, 예를 들면 <a> 태그 클릭 시 페이지 이동, <form> 제출 시 페이지 새로고침 등이 있습니다.

하지만 때때로 이런 기본 동작이 원하는 동작과 다를 수 있습니다. 예를 들어, 사용자가 버튼을 클릭했을 때 페이지 이동 대신 JavaScript 함수를 실행하고 싶을 수 있습니다.
이런 경우에 event.preventDefault()를 사용하여 이벤트의 기본 동작을 막을 수 있습니다.

따라서 event.preventDefault()는 이벤트 핸들러 내에서 사용되며, 그 이벤트의 기본 동작을 중단시킵니다. 이 메소드가 호출되면, 그 이벤트는 더 이상 진행되지 않습니다.
이 메소드는 주로 <a>, <submit> 등의 태그에서 원치 않는 페이지 리로드 또는 이동을 막는 데 사용됩니다.

예시:

javascript
Copy code
myForm.addEventListener('submit', function(event) {
  event.preventDefault();
  // form 제출 이벤트의 기본 동작인 페이지 새로고침을 막고, 대신 아래 코드를 실행합니다.
  console.log('Form submitted!');
});

----------------------------------------------------------------------------------------------------------------------------------------------------------------
(arrow function)
 <Nav topics={topics} onChangeMode={(id)=>{
      alert(id);
     }}></Nav>

    <Nav topics={topics} onChangeMode={function(id){
        alert(id);
    }}></Nav>
----------------------------------------------------------------------------------------------------------------------------------------------------------------

